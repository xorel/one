#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# ln fe:SOURCE host:remote_system_ds/disk.i vmid dsid
#   - fe is the front-end hostname
#   - SOURCE is the path of the disk image in the form DS_BASE_PATH/disk
#   - host is the target host to deploy the VM
#   - remote_system_ds is the path for the system datastore in the host
#   - vmid is the id of the VM
#   - dsid is the target datastore (0 is the system datastore)

SRC=$1
# centos7-ev-kvm-qcow2-ssh-5-9-90-1713f-0.test:/var/lib/one//datastores/1/70970a2cad9f8c597bd810e837ea9dc9

DST=$2
# centos7-ev-kvm-qcow2-ssh-5-9-90-1713f-2.test:/var/lib/one//datastores/0/5/disk.0

VMID=$3 # 5
DSID=$4 # 1

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
fi

. $TMCOMMON

DRIVER_PATH=$(dirname $0)

#-------------------------------------------------------------------------------
# Set dst path and dir
#-------------------------------------------------------------------------------
DST_HOST=`arg_host $DST`          # centos7-ev-kvm-qcow2-ssh-5-9-90-1713f-2.test
DST_PATH=`arg_path $DST`          # /var/lib/one//datastores/0/5/disk.0
DST_SNAP_DIR=${DST_PATH}.snap     # /var/lib/one//datastores/0/5/disk.0.snap
DST_FILE=`basename $DST_PATH`     # disk.0
DST_DIR=`dirname $DST_PATH`       # /var/lib/one//datastores/0/5

SRC_HOST=`arg_host $SRC`          # centos7-ev-kvm-qcow2-ssh-5-9-90-1713f-0.test
SRC_PATH=`arg_path $SRC`          # /var/lib/one//datastores/1/70970a2cad9f8c597bd810e837ea9dc9
SRC_SNAP_DIR=${SRC_PATH}.snap     # /var/lib/one//datastores/1/70970a2cad9f8c597bd810e837ea9dc9.snap

#-------------------------------------------------------------------------------
# Create DST path
#-------------------------------------------------------------------------------

ssh_make_path $DST_HOST $DST_DIR 'ssh'

#-------------------------------------------------------------------------------
# Copy SRC into DST
#-------------------------------------------------------------------------------
log "Copying $SRC_PATH in $DST"

type="$(file -b --mime-type $SRC_PATH)"

if [ "$type" == "application/x-iso9660-image" ]; then
    exec_and_log "$SCP ${SRC_PATH} ${DST_PATH}" "Error copying ${SRC_PATH} to ${DST_PATH}"
else
    if [ -d ${SRC_SNAP_DIR} ]; then
        SCP_CMD="$RSYNC -a --no-links -e ssh ${SRC_HOST}:${SRC_SNAP_DIR}/[0-9]\* ."
    else
        SCP_CMD="$SCP ${SRC_HOST}:${SRC_PATH} 0"
    fi

    # The CMD performs following
    # - create .snap directory in destination
    # - copy (RSYNC) all existing snapshot there, or the main image file as snap 0
    # - creates symlink `disk.0.snap -> .`, used internally by qcow2 format
    # - rebase all snapshots to point the backing_file locally
    # - symlink to the latest snapshot, i.e: `disk.0 -> disk.0.snap/1`
    CMD=$(cat <<EOT
set -ex -o pipefail

mkdir -p "${DST_SNAP_DIR}"

cd "${DST_SNAP_DIR}"
$SCP_CMD

rm -f "${DST_FILE}.snap"
ln -sf "." "${DST_FILE}.snap"

for SNAP_ID in \$(find * -maxdepth 0 -type f -print); do
    INFO=\$(qemu-img info -U --output=json \$SNAP_ID)

    if [[ \$INFO =~ "backing-filename" ]]; then
        BACKING_FILE=\${INFO/*backing-filename\": \"/}
        BACKING_FILE=\${BACKING_FILE/\"*/}
        BACKING_FILE=\$(basename \${BACKING_FILE})
        qemu-img rebase -f qcow2 -u -b "${DST_FILE}.snap/\$BACKING_FILE" \$SNAP_ID
    fi
done

SNAP="\$(ls | grep '^[[:digit:]]*$' | sort -n | tail -n 1 || :)"
cd ..
rm -f "${DST_FILE}"
ln -sf "${DST_FILE}.snap/\$SNAP" "${DST_FILE}"

EOT
)
fi

ssh_exec_and_log $DST_HOST "$CMD" "Error copying $SRC to $DST"

exit 0
