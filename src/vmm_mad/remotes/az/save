#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
# -------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby' if !defined?(RUBY_LIB_LOCATION)
    GEMS_LOCATION     = '/usr/share/one/gems' if !defined?(GEMS_LOCATION)
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby' if !defined?(RUBY_LIB_LOCATION)
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems' if !defined?(GEMS_LOCATION)
end

if File.directory?(GEMS_LOCATION)
    Gem.use_paths(GEMS_LOCATION)
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'az_driver'

deploy_id = ARGV[0]
file      = ARGV[1]
host      = ARGV[2]

begin
    #id = deploy_id.match(/([^_]+)-(.+)/)[-1]
    #vm = OpenNebula::VirtualMachine.new_with_id(id, OpenNebula::Client.new)
    #vm.info
    #
    opts_credentials = AzDriver.host_credentials_with_name(host)
    client = AzDriver::Client.new(opts_credentials)

    opts = {
        gname: host,
        name: deploy_id,
        client: client
    }

    az_vm = AzDriver::VirtualMachine.new(opts).tap do |vm|
        vm.stop
    end
rescue => e
    OpenNebula.handle_driver_exception("Save", e, host, deploy_id, nil, file)
end
