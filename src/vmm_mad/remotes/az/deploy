#!/usr/bin/env ruby

# ---------------------------------------------------------------------------- #
# Copyright 2002-2019, OpenNebula Project, OpenNebula Systems                  #
#                                                                              #
# Licensed under the Apache License, Version 2.0 (the "License"); you may      #
# not use this file except in compliance with the License. You may obtain      #
# a copy of the License at                                                     #
#                                                                              #
# http://www.apache.org/licenses/LICENSE-2.0                                   #
#                                                                              #
# Unless required by applicable law or agreed to in writing, software          #
# distributed under the License is distributed on an "AS IS" BASIS,            #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.     #
# See the License for the specific language governing permissions and          #
# limitations under the License.                                               #
# ---------------------------------------------------------------------------- #

ONE_LOCATION = ENV['ONE_LOCATION'] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION = '/usr/lib/one/ruby' if !defined?(RUBY_LIB_LOCATION)
    GEMS_LOCATION     = '/usr/share/one/gems' if !defined?(GEMS_LOCATION)
else
    RUBY_LIB_LOCATION = ONE_LOCATION + '/lib/ruby' if !defined?(RUBY_LIB_LOCATION)
    GEMS_LOCATION     = ONE_LOCATION + '/share/gems' if !defined?(GEMS_LOCATION)
end

if File.directory?(GEMS_LOCATION)
    Gem.use_paths(GEMS_LOCATION)
end

$LOAD_PATH << RUBY_LIB_LOCATION
$LOAD_PATH << File.dirname(__FILE__)

require 'az_driver'

dfile = ARGV[0]
host  = ARGV[1]
id    = ARGV[2]

# command example
# /var/lib/one/remotes/vmm/az/deploy '/var/lib/one/vms/123/deployment.0' 'azure00' 123 azure00

begin

    one_client = OpenNebula::Client.new
    pool = OpenNebula::HostPool.new(one_client)
    pool.info

    host_id = pool["/HOST_POOL/HOST[NAME='#{host}']/ID"].to_i
    location = pool["/HOST_POOL/HOST[NAME='#{host}']/TEMPLATE/REGION_NAME"].to_s

    #vm = OpenNebula::VirtualMachine.new_with_id(id, one_client)
    #vm.info

    opts_credentials = AzDriver::Helper.host_credentials_with_id(host_id)
    client = AzDriver::Client.new(opts_credentials)

    opts_new = {
        client: client,
        region: location,
        gname:  host
    }

    rgroup= AzDriver::ResourceGroup.new(opts_new).tap do |rg|
        rg.create()
    end

    network = AzDriver::Network.new(opts_new).tap do |net|
        net.az_item = rgroup.create_net()
    end

    opts_new[:name] = "one-#{id}"
    vm = AzDriver::VirtualMachine.new(opts_new).tap do |az_vm|
        network.create_nic(opts_new[:name])
    end

    #lcm_state = vm.lcm_state_str
    #deploy_id = vm.deploy_id

    xml=File.read(dfile)
    dinfo = AzDriver::Helper.get_deployment_info(host, xml, location)
    rgroup.create_vm(dinfo)

    #az_drv = AzureDriver.new(host)


    #puts az_drv.deploy(id, host, text, lcm_state, deploy_id)

rescue => e
    OpenNebula.handle_driver_exception("Deploy", e, host, "", id, dfile)
end
